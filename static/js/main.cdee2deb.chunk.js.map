{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","RandomQuoteMachine","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","randomIndex","handleClick","bind","assertThisInitialized","event","setState","Math","floor","random","newQuote","quote","author","react_default","a","createElement","id","className","href","title","target","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oLCiEzBC,2BA5DX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACnBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,YAAa,GAEfR,EAAKS,YAAcT,EAAKS,YAAYC,KAAjBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KALAA,2EAQXY,GACRT,KAAKU,SAAS,CACZL,YAAaM,KAAKC,MAAsB,GAAhBD,KAAKE,6CAK/B,IAsBEC,EAtBa,CACb,CAACC,MAAO,eAAgBC,OAAQ,WAChC,CAACD,MAAO,uDAAwDC,OAAQ,WACxE,CAACD,MAAO,6EAA8EC,OAAQ,WAC9F,CAACD,MAAO,iBAAkBC,OAAQ,WAClC,CAACD,MAAO,wEAAyEC,OAAQ,iBACzF,CAACD,MAAO,6EAA8EC,OAAQ,iBAC9F,CAACD,MAAO,yEAA0EC,OAAQ,iBAC1F,CAACD,MAAO,mCAAoCC,OAAQ,UACpD,CAACD,MAAO,4DAA6DC,OAAQ,sBAC7E,CAACD,MAAO,gCAAiCC,OAAQ,UACjD,CAACD,MAAO,4DAA6DC,OAAQ,WAC7E,CAACD,MAAO,sCAAuCC,OAAQ,WACvD,CAACD,MAAO,kEAAmEC,OAAQ,gBACnF,CAACD,MAAO,qDAAsDC,OAAQ,WACtE,CAACD,MAAO,kCAAmCC,OAAQ,WACnD,CAACD,MAAO,gCAAiCC,OAAQ,eACjD,CAACD,MAAO,+DAAgEC,OAAQ,wBAChF,CAACD,MAAO,sCAAuCC,OAAQ,WACvD,CAACD,MAAO,iEAAkEC,OAAQ,eAClF,CAACD,MAAO,wDAAyDC,OAAQ,cAEvDhB,KAAKI,MAAMC,aAE/B,OACEY,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACRH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACNH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACfJ,EAAAC,EAAAC,cAAA,QAAMC,GAAG,QAAOH,EAAAC,EAAAC,cAAA,KAAGE,UAAU,qBAAwBP,EAASC,QAE9DE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACbJ,EAAAC,EAAAC,cAAA,QAAMC,GAAG,UAAT,IAAoBN,EAASE,SAE/BC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,SAASD,GAAG,cAAcE,KAAK,mCAAmCC,MAAM,oBAAoBC,OAAO,UAC9GP,EAAAC,EAAAC,cAAA,KAAGE,UAAU,mBACfJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,SAASD,GAAG,YAAYK,QAASzB,KAAKM,aAAxD,eAGJW,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UAAf,IAAyBJ,EAAAC,EAAAC,cAAA,gBAAOF,EAAAC,EAAAC,cAAA,KAAGG,KAAK,iCAAR,wBAvDLI,IAAMC,YCMnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cdee2deb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './quotes.scss';\n\nclass RandomQuoteMachine extends React.Component {\n    constructor(props) {\n    super(props);\n    this.state = {\n      randomIndex: 0\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n\nhandleClick(event) {\n    this.setState({\n      randomIndex: Math.floor(Math.random() * 20),\n      });\n  }\n\n  render() {\n    const quotes = [\n      {quote: \"As you wish.\", author: \"Westley\"},\n      {quote: \"This is true love. You think this happens every day?\", author: \"Westley\"},\n      {quote: \"Death cannot stop true love. All it can do is delay it for a little while.\", author: \"Westley\"},\n      {quote: \"Inconceivable!\", author: \"Vizzini\"},\n      {quote: \"He's moving awfully fast. I wonder if he's using the same wind as us.\", author: \"Inigo Montoya\"},\n      {quote: \"You keep using that word. I do not think it means what you think it means.\", author: \"Inigo Montoya\"},\n      {quote: \"Hello. My name is Inigo Montoya. You killed my father. Prepare to die.\", author: \"Inigo Montoya\"},\n      {quote: \"You've been mostly dead all day.\", author: \"Fezzik\"},\n      {quote: \"I think everything is a trap. That's why I'm still alive.\", author: \"Prince Humperdinck\"},\n      {quote: \"Oh, you mean *this* gate key.\", author: \"Yellin\"},\n      {quote: \"Never go in against a Sicilian when death is on the line!\", author: \"Vizzini\"},\n      {quote: \"Plato, Aristotle, Socrates? Morons!\", author: \"Vizzini\"},\n      {quote: \"Life is pain. Anyone who says differently is selling something.\", author: \"Man in Black\"},\n      {quote: \"Rodents of Unusual Size? I don't think they exist.\", author: \"Westley\"},\n      {quote: \"I'm not a witch, I'm your wife!\", author: \"Valerie\"},\n      {quote: \"Have fun storming the castle!\", author: \"Miracle Max\"},\n      {quote: \"Mawwage, that bwessed awwangement, that dweam wifin a dweam.\", author: \"Impressive Clergyman\"},\n      {quote: \"Yes you're very smart, now shut up.\", author: \"Grandpa\"},\n      {quote: \"I've just sucked one year of your life away...how do you feel?\", author: \"Count Rugen\"},\n      {quote: \"I died that day. And you can die too, for all I care.\", author: \"Buttercup\"}\n  ];   \nconst newQuote = quotes[this.state.randomIndex];\n  \n    return (\n      <div id=\"wrapper\">\n      <div id=\"quote-box\">\n        <div className=\"quote-text\">\n        <span id=\"text\"><i className=\"fa fa-quote-left\"></i>{newQuote.quote}</span>\n        </div>\n        <div className=\"quote-author\">\n          <span id=\"author\">-{newQuote.author}</span>\n        </div>\n        <div className=\"buttons\">\n          <a className=\"button\" id=\"tweet-quote\" href=\"https://twitter.com/intent/tweet\" title=\"Tweet this quote!\" target=\"_blank\">        \n            <i className=\"fa fa-twitter\"></i></a>\n          <button className=\"button\" id=\"new-quote\" onClick={this.handleClick}>New quote</button>\n        </div>\n      </div>\n      <div className=\"footer\"> <em>by <a href=\"https://github.com/stefanhk31\">stefanhk31</a></em></div>\n    </div>\n    );\n  }\n}\n\nexport default RandomQuoteMachine;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}